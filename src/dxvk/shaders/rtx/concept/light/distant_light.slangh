/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Distant Light Functions

DistantLight distantLightCreate(DecodedPolymorphicLight decodedPolymorphicLight)
{
  // Decode the Distant Light from the packed memory representation
  // Note: Light type is known in advance

  DistantLight distantLight;

  const u16vec2 data00 = unpack16(decodedPolymorphicLight.data0.x);
  const u16vec2 data01 = unpack16(decodedPolymorphicLight.data0.y);
  const u16vec2 data02 = unpack16(decodedPolymorphicLight.data0.z);
  const u16vec2 data03 = unpack16(decodedPolymorphicLight.data0.w);
  const uint32_t data20 = decodedPolymorphicLight.data2.x;
  const uint32_t data21 = decodedPolymorphicLight.data2.y;

  distantLight.direction = f16vec3(uint16BitsToHalf(data00.x), uint16BitsToHalf(data00.y), uint16BitsToHalf(data01.x));
  distantLight.orientation = f16vec4(
    uint16BitsToHalf(data01.y),
    uint16BitsToHalf(data02.x),
    uint16BitsToHalf(data02.y),
    uint16BitsToHalf(data03.x));
  // Note: data03.y unused
  distantLight.cosHalfAngle = uintBitsToFloat(data20);
  distantLight.sinHalfAngle = uintBitsToFloat(data21);
  distantLight.radiance = decodedPolymorphicLight.radiance;

  return distantLight;
}

vec3 distantLightCalcPower(DistantLight distantLight)
{
  // Note: Integrated over arbitrary 1000x1000 unit surface to have sufficent contribution estimation
  // in a typical scene
  return 1000.0f * 1000.0f * distantLight.radiance;
}

float distantLightCalcWeight(DistantLight distantLight, MinimalSurfaceInteraction viewSurfaceInteraction)
{
    // Note: Incoming luminance for every point in the world from the light is already known
    return calcBt709Luminance(distantLight.radiance);
}

float distantLightCalcWeight(DistantLight distantLight, VolumeInteraction viewVolumeInteraction)
{
    // Note: Incoming luminance for every point in the world from the light is already known
    return calcBt709Luminance(distantLight.radiance);
}

LightSample distantLightSampleArea(DistantLight distantLight, f16vec2 sampleCoordinates, vec3 position)
{
  // Calculate the sample direction from a cone of directions
  // Note: This represents the solid angle to be sampled from of the distant light based on its half angle

  float uniformConeSolidAnglePdf;
  const f16vec3 rawDistantDirectionSample = calcUniformConeDirectionSample(sampleCoordinates, distantLight.cosHalfAngle, uniformConeSolidAnglePdf);
  // Note: No normalization required here as calcUniformConeDirectionSample should produce a normalized direction and a normalized quaternion
  // should preserve the normalization across a transformation. Do note however that if the quaternion is not normalized for some reason this will
  // produce incorrect results (but currently the direction the quaternion is constructed with on the CPU side is ensured to be normalized).
  const f16vec3 distantDirectionSample = quaternionTransformVector(distantLight.orientation, rawDistantDirectionSample);

  // Calculate sample position on the distant light
  // Todo: Since there is no physical distant light to hit (as it is at infinity), this simply uses a large
  // number far enough away from anything in the world, but this could be improved.

  const f16vec3 distantNormalSample = distantLight.direction;
  const vec3 distantPositionSample = position + vec3(-distantDirectionSample) * 100000.0f;

  // Create the light sample

  LightSample lightSample;

  lightSample.position = distantPositionSample;
  lightSample.normal = distantNormalSample;
  // Note: This will generate NaNs if cosHalfAngle == 1, but the assumption is that it never will as dirac delta
  // lights are not handled properly by this light model for performance.
  lightSample.radiance = distantLight.radiance / square(distantLight.sinHalfAngle);
  lightSample.solidAnglePdf = uniformConeSolidAnglePdf;

  return lightSample;
}

LightSample distantLightSampleArea(
  DistantLight distantLight, f16vec2 sampleCoordinates,
  MinimalSurfaceInteraction viewSurfaceInteraction)
{
  return distantLightSampleArea(
    distantLight, sampleCoordinates,
    viewSurfaceInteraction.position);
}

LightSample distantLightSampleArea(
  DistantLight distantLight, f16vec2 sampleCoordinates,
  VolumeInteraction viewVolumeInteraction)
{
  return distantLightSampleArea(
    distantLight, sampleCoordinates,
    viewVolumeInteraction.position);
}
