/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Light Shaping Functions

LightShaping lightShapingCreate(bool enabled, uint32_t data0, uint32_t data1, uint32_t data2)
{
  // Decode the Light Shaping from the packed memory representation

  LightShaping lightShaping = {};

  const u16vec2 data00 = unpack16(data0);
  const u16vec2 data10 = unpack16(data1);
  const u16vec2 data20 = unpack16(data2);

  if (enabled)
  {
    lightShaping.enabled = true;
    lightShaping.primaryAxis = f16vec3(
      uint16BitsToHalf(data00.x),
      uint16BitsToHalf(data00.y),
      uint16BitsToHalf(data10.x));
    lightShaping.oneMinusCosConeAngle = uint16BitsToHalf(data10.y);
    lightShaping.coneSoftness = uint16BitsToHalf(data20.x);
    lightShaping.focusExponent = uint16BitsToHalf(data20.y);
  }
  else
  {
    lightShaping.enabled = false;
  }

  return lightShaping;
}

// Note: Light view direction represents a normalized direction from a sampled point on the light's surface to the viewing position.
// Additionally, this code is borrowed from Omniverse to somewhat match its behavior, though with some things removed.
float16_t lightShapingCalcScaledRadialFalloff(LightShaping lightShaping, f16vec3 lightToViewDirection, float16_t ratio)
{
  // Lights with angles < 1.3 will fall to 0 when you use float 16 here.
  const float cosTheta = dot(vec3(lightShaping.primaryAxis), vec3(lightToViewDirection));
  const float scaledConeAngle = (1.0 - float(lightShaping.oneMinusCosConeAngle)) * float(ratio);

  if (cosTheta < scaledConeAngle)
  {
    return float16_t(0.0f);
  }

  const float softenedIntensity = smoothstep(scaledConeAngle, scaledConeAngle + float(lightShaping.coneSoftness), cosTheta);
  const float focusedIntensity = pow(cosTheta, float(lightShaping.focusExponent) * float(ratio));

  if (lightShaping.focusExponent <= 0.0f)
  {
    return float16_t(softenedIntensity);
  }

  return float16_t(mix(softenedIntensity, 1.0f, focusedIntensity * softenedIntensity));
}

float16_t lightShapingCalcRadialFalloff(LightShaping lightShaping, f16vec3 lightToViewDirection)
{
  if (!lightShaping.enabled)
  {
    return float16_t(1.0f);
  }

  return lightShapingCalcScaledRadialFalloff(lightShaping, lightToViewDirection, float16_t(1.0f));
}

float16_t lightShapingCalcPlanarFalloff(
  LightShaping lightShaping, f16vec3 xAxis, f16vec3 yAxis, float16_t ratio, f16vec3 lightToViewDirection)
{
  if (!lightShaping.enabled)
  {
    return float16_t(1.0f);
  }

  // Project light vectors

  f16vec3 xProjectedLightVector = lightToViewDirection - xAxis * dot(xAxis, lightToViewDirection);
  f16vec3 yProjectedLightVector = lightToViewDirection - yAxis * dot(yAxis, lightToViewDirection);

  const float16_t xProjectedLightDistance = length(xProjectedLightVector);
  const float16_t yProjectedLightDistance = length(yProjectedLightVector);

  // Note: Ensure normalization factor is not zero to avoid NaNs in the projected light directions.
  if (
    xProjectedLightDistance == float16_t(0.0f) ||
    yProjectedLightDistance == float16_t(0.0f))
  {
    return float16_t(0.0f);
  }

  const f16vec3 xProjectedLightDir = xProjectedLightVector / xProjectedLightDistance;
  const f16vec3 yProjectedLightDir = yProjectedLightVector / yProjectedLightDistance;

  // compute the falloff in each dimension separately
  // TODO: effect of this ratio is odd, but it is in renderman, and so also here for now
  const float16_t xFalloff = lightShapingCalcScaledRadialFalloff(lightShaping, xProjectedLightDir, float16_t(1.0f));
  const float16_t yFalloff = lightShapingCalcScaledRadialFalloff(lightShaping, yProjectedLightDir, ratio);

  return xFalloff * yFalloff;
}
