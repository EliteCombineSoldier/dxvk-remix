/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/utility/common.slangh"

vec4 sanitizeRadianceHitDistance(
  vec3 radiance, float hitDistance)
{
  // Pre-filter final radiance value
  const vec3 fireflyFilteredRadiance = fireflyFiltering(radiance, cb.fireflyFilteringLuminanceThreshold);

  // Output final radiance and hit distance
  // Note: Demodulation for NRD and other pre-denoising calculations happens in a separate pass due to not having the required
  // primary hit information accessible in this function. This is better anyways as otherwise this data would have to act as
  // live state across the shader and either add register pressure or make the payload struct for TraceRay much bigger.

  return vec4(fireflyFilteredRadiance, hitDistance);
}

vec4 sanitizeRadianceHitDistance(vec4 radianceHitDistance)
{
  return sanitizeRadianceHitDistance(radianceHitDistance.xyz, radianceHitDistance.a);
}
