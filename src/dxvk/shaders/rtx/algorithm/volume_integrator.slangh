/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Note: volume_integrator.h must be first include to define required structures
#include "rtx/algorithm/volume_integrator.h"
#include "rtx/algorithm/volume_integrator_helpers.slangh"
#include "rtx/utility/common.slangh"
#include "rtx/utility/noise.slangh"
#include "rtx/utility/color.slangh"
#include "rtx/concept/ray/ray.slangh"
#include "rtx/concept/light/light.slangh"
#include "rtx/utility/packing.slangh"
#include "rtx/utility/froxel.slangh"
#include "rtx/algorithm/resolve.slangh"
#include "rtx/algorithm/lighting.slangh"
#include "rtx/algorithm/rtxdi/rtxdi.slangh"

// Volume Integrate Helper Functions

// Todo: Find some way to unify this with the normal Integrator's evalNEE function some day. Not ideal to duplicate code like this.
void evalNEE(
  inout vec3 radiance,
  LightSample lightSample, float invSelectionPdf, uint8_t sampledTransportPortalIndex,
  Ray viewRay, MinimalRayInteraction minimalRayInteraction, VolumeInteraction volumeInteraction)
{
  const VolumeArgs volumeArgs = cb.volumeArgs;

  // Test visibility to the light sample

  const VisibilityResult visibility = evalVolumeNEEVisibility(
    lightSample, sampledTransportPortalIndex,
    viewRay, minimalRayInteraction, volumeInteraction);

  if (visibility.hasOpaqueHit)
  {
    return;
  }

  // Todo: Add emission here later if beneficial, currently not used, but ray payload size is not too important
  // for Ray Query functions so it might not hurt to add.

  // Accumulate radiance

  const float lightSampleThroughput = invSelectionPdf / lightSample.solidAnglePdf;
  const vec3 lightThroughput = lightSampleThroughput * vec3(visibility.attenuation);

  vec3 volumeAttenuation = vec3(1.0f);

  if (volumeArgs.enableVolumetricLighting)
  {
    // Todo: Replace evalBeerLambertAttenuation here (and in other locations) with a specialized volumetric helper (just in case we want to take something
    // like atmosphere height into account in the future, or the actual enabled status of the volume).
    // Note: Factor in volumetric attenuation in volumetric NEE rays (when volumetrics are enabled )to simulate somewhat more correct light falloff through a medium. Note we're
    // still lacking a multiscattering contribution along the ray for now, but this isn't as bad as say doing this on every standard integration ray (which causes a significant amount
    // of energy loss).
    volumeAttenuation = evalBeerLambertAttenuation(cb.volumeArgs.attenuationCoefficient, visibility.hitDistance);
  }

  const vec3 attenuatedRadiance = lightSample.radiance * lightThroughput * volumeAttenuation;

  // Note: Sanitize radiance value from NEE to ensure no rare NaNs or other invalid values happen as these
  // can propigate in the volume and cause large artifacts which may ruin a user's expierence. Ideally we'd
  // have no NaNs but tracking down the rare few in this large of a codebase currently is tricky. Similar
  // sanitization is done in the demodulate pass for non-volumetric lighting before feeding data to the
  // denoisers.
  radiance += sanitize(attenuatedRadiance, vec3(0.0f, 0.0f, 0.0f));
}

// Volume Integrate Functions

void integrateVolume(
  inout RAB_RandomSamplerState rabRandomState, uvec3 froxelIndex, uint froxelVolume, uint previousFroxelVolume, bool previousVolumeExists,
  Ray ray, MinimalRayInteraction minimalRayInteraction, VolumeInteraction volumeInteraction,
  vec3 previousFroxelUVW, uvec3 previousFroxelIndex, uvec3 clampedPreviousFroxelIndex)
{
  const VolumeArgs volumeArgs = cb.volumeArgs;
  const uvec3 froxelVolumeOffset = uvec3(volumeArgs.froxelGridDimensions.x * froxelVolume, 0, 0);
  const uvec3 previousFroxelVolumeOffset = uvec3(volumeArgs.froxelGridDimensions.x * previousFroxelVolume, 0, 0);

  // Create wrapper structs for Volume ReSTIR API

  VolumeReSTIR_Parameters volumeParameters;
  volumeParameters.volumeRISTotalSampleCount = cb.volumeRISTotalSampleCount;
  volumeParameters.enableVolumeRISInitialVisibility = volumeArgs.enableVolumeRISInitialVisibility != 0;

  RAB_VolumeInteraction rabVolumeInteraction;
  rabVolumeInteraction.volumeInteraction = volumeInteraction;

  RAB_VolumeVisibilityContext rabVolumeVisibilityContext;
  rabVolumeVisibilityContext.ray = ray;
  rabVolumeVisibilityContext.minimalRayInteraction = minimalRayInteraction;

  // Read information from the previous frame for accumulation based on a reprojected froxel coordinate

  const bool reprojectionValid = all(previousFroxelUVW > vec3(0.0f, 0.0f, 0.0f) && previousFroxelUVW < vec3(1.0f, 1.0f, 1.0f));
  vec3 oldRadiance = vec3(0.0f, 0.0f, 0.0f);
  // Note: Left uninitialized as it will be written to in all paths when reprojecting existing temporal reservoirs.
  VolumeReSTIR_Reservoir oldVolumeReservoir;
  // Note: Default to no penalty when reprojecting (assumes the reprojection is fairly reasonable).
  float reprojectionConfidencePenalty = 1.0f;
  // Note: Default age is 0 when reprojection fails to reset history.
  float newHistoryAge = 0.0f;
  // Note: Default to 1.0 when reprojection fails to always favor new data coming in.
  float historyAgeWeight = 1.0f;

  if (previousVolumeExists)
  {
    if (reprojectionValid)
    {
      // Read previous history and radiance

      // Note: This conversion is done after checking if the reprojection is valid to allow for the virtual UVW coordinates to trigger a failure on that if
      // applicable (for proper reprojection confidence loss). Additionally, in theory this conversion could cause the froxel sampled from UVW wise to detach
      // from the already computed previous froxel index, but as long as the logic is working properly (e.g. clamping only to the center of the edge froxel),
      // this will not happen.
      const vec3 physicalPreviousFroxelUVW = virtualFroxelUVWToPhysicalFroxelUVW(
        previousFroxelUVW, previousFroxelVolume,
        volumeArgs.minFilteredRadianceU, volumeArgs.maxFilteredRadianceU, volumeArgs.inverseNumFroxelVolumes);
      // Note: Filtered read for now (may pose issues in the future depending on how we handle the contribution through ray portals as
      // these methods may require custom filtering logic). Additionally, the history age stored in the alpha channel is filtered too
      // which is fine as this should blend the histories of the contributions involved in the sample, which makes sense.
      const vec4 oldAccumulatedRadianceHistoryAge = PrevAccumulatedRadiance.SampleLevel(physicalPreviousFroxelUVW, 0);

      // Note: Increment the sampled history age by 1 to represent this new sample.
      newHistoryAge = min(oldAccumulatedRadianceHistoryAge.w + 1.0f, volumeArgs.maxAccumulationFrames);
      // Note: Radiance stored in buffer is in gamma space for better perceptual texture filtering to avoid artifacts (and less quantization) and must be
      // converted to linear space here.
      oldRadiance = gammaToLinearFast(oldAccumulatedRadianceHistoryAge.xyz);

      // Note: The initial value for the history age in the buffer will be 0, then it will be incremented to 1. This check then ensures we
      // only manipulate the history weight for information beyond the first sample, as the first sample should always fully write
      // into the texture to overwrite potential uninitialized information there.
      if (newHistoryAge > 1.0f)
      {
        // Note: Samples for an age past 1 follow the progression 1/(1+offset), 1/(2+offset), etc, causing it to favor the history more
        // and more once things stabilize. The offset is used to immediately start favoring history more than it would otherwise to minimize
        // instability in freshly visible regions at the cost of slightly more time to accumulate a new contribution. This can be tweaked to minimize
        // instability and flickering but should not be raised too high as an initial bad sample will persist longer in a disoccluded region otherwise.
        const float historyAgeOffset = 5.0f;

        historyAgeWeight = 1.0f / (newHistoryAge + historyAgeOffset);
      }

      // Read previous volume reservoir

      VolumeReSTIR_PackedReservoir packedReservoir;

      // Note: Nearest reservoir to the previous position read, potentially jittering this in the future may help accumulate better data (the jittering
      // could be done by the reprojection itself as that is potentially part of that logic as well to distribute samples temporally a bit more).
      packedReservoir.data0 = PrevVolumeReservoirs[previousFroxelIndex + previousFroxelVolumeOffset];

      oldVolumeReservoir = VolumeReSTIR_Reservoir::createFromPacked(packedReservoir);
    }
    else
    {
      // Todo: Pull radiance (and in the future the previous volume reservoir) from some sort of fallback world space datastructure here.

      // Read previous volume reservoir

      VolumeReSTIR_PackedReservoir packedReservoir;

      // Note: For now we fall back to a clamped previous reservoir to populate it at least with something rather than starting from scratch in regions of disocclusion.
      // This is fine because we are still sampling new lights with respect to the new worldspace position, just factoring in some "spatial" candidates (since usually lights
      // near the side of the screen should work fine for neighboring regions slightly off the screen in the previous frame). Additionally this will not cause visual smearing
      // as much as bringing over radiance from the edges would, merely giving it some more good lights to consider.
      packedReservoir.data0 = PrevVolumeReservoirs[clampedPreviousFroxelIndex + previousFroxelVolumeOffset];

      oldVolumeReservoir = VolumeReSTIR_Reservoir::createFromPacked(packedReservoir);

      // Apply a penalty for the clamped reprojection
      // Note: This is to ensure sample counts do not simply remain at a high value and are instead penalized due to their potential
      // inaccuracy when being clamped. This may not need to be as strong of a penalty once some sort of fallback grid exists.

      reprojectionConfidencePenalty = cb.volumeClampedReprojectionConfidencePenalty;
    }
  }

  // Create a current Volume Reservoir to merge samples into

  VolumeReSTIR_Reservoir currentVolumeReservoir = VolumeReSTIR_Reservoir::createEmpty();

  // Handle temporal resampling

  // Note: We only disable this codepath when temporal resampling is disabled as hopefully constant folding will optimize out the rest of
  // the code fetching a previous volume reservoir and doing a light index remapping. Generally this will not often be disabled much anyways,
  // as this option is mostly to be used for debugging and visual comparison.
  if (volumeArgs.enableVolumeTemporalResampling && previousVolumeExists)
  {
    // Correct the old reservoir for temporal/spatial reprojection effects

    VolumeReSTIR_TemporalCorrection(oldVolumeReservoir, reprojectionConfidencePenalty, cb.volumeTemporalReuseMaxSampleCount);
    VolumeReSTIR_SpatialCorrection(oldVolumeReservoir, rabVolumeInteraction);

    // Merge the temporal reservoir

    currentVolumeReservoir.merge(RAB_GetNextRandom(rabRandomState), oldVolumeReservoir);
  }

  // Todo: Spatial resampling here potentially in the future

  // Calculate the number of reservoir samples to do based on the stability information

  const float linearReservoirSamplesStabilityWeight =
    saturate((newHistoryAge - volumeArgs.minReservoirSamplesStabilityHistory) / volumeArgs.reservoirSamplesStabilityHistoryRange);
  const float reservoirSamplesStabilityWeight =
    pow(linearReservoirSamplesStabilityWeight, volumeArgs.reservoirSamplesStabilityHistoryPower);
  // Note: Max samples are done when the weight is 0, the minimum number of samples is done when the weight is 1.
  const uint reservoirSamples =
    mix(volumeArgs.maxReservoirSamples, volumeArgs.minReservoirSamples, reservoirSamplesStabilityWeight);

  // Perform a number of Reservoir samples
  // Note: Each reservoir here sampled acts somewhat like a traditional NEE+RIS sample like we did before as each does an
  // initial visibility raycast to factor occlusion into which light is finally selected in the end. The main difference is that
  // we only get 1 light sample out of this process rather than a number of lights, but using more than 1 or 2 lights is supposedly
  // not significantly better than simply generating a good sample and picking a single light.

  for (uint reservoirSample = 0; reservoirSample < reservoirSamples; ++reservoirSample)
  {
    // Construct a new Reservoir via RIS

    // Note: Cached light sample currently used externally, could be used to avoid needing to rederive the light sample in some
    // cases, but this may just add divergance and not be worth it.
    RAB_LightSample cachedSelectedLightSample;
    const VolumeReSTIR_Reservoir newVolumeReservoir = VolumeReSTIR_SampleLightRIS(
      rabRandomState, rabVolumeVisibilityContext, rabVolumeInteraction,
      cachedSelectedLightSample, volumeParameters);

    // Merge the new Reservoir into the current Reservoir

    currentVolumeReservoir.merge(RAB_GetNextRandom(rabRandomState), newVolumeReservoir);
  }

  // Finalize the resampling process

  currentVolumeReservoir.finalizeResampling(1.0f, currentVolumeReservoir.sampleCount);

  // Write the new accumulated reservoir out
  // Note: The reservoir may be invalid here and thus have a nonsense sample count, but it is important to write it out fully anyways
  // so that the weight is set to 0 in the reservoir buffer so the next frame's temporal resampling can recognize this (as the invalid
  // sample count won't matter if the weight is 0, just keep this in mind if ever looking at a debug view of the sample count as it may
  // have values wildly out of the usual range).

  const VolumeReSTIR_PackedReservoir packedReservoir = currentVolumeReservoir.pack();

  VolumeReservoirs[froxelIndex + froxelVolumeOffset] = packedReservoir.data0;

  // Perform NEE on the final Reservoir

  vec3 radiance = vec3(0.0f, 0.0f, 0.0f);

  {
    RAB_LightSample rabLightSample;
    float inverseSelectionPdf;
    // Note: The Ray Portal index that the NEE light sample should be assumed to be sampled through.
    // Set to the invalid index if the light was not sampled through a Ray Portal.
    uint8_t sampledTransportPortalIndex = invalidRayPortalIndex;

    // Select and sample from a light for NEE via the Reservoir

    const bool lightSampleValid = VolumeReSTIR_GetLightSample(
      currentVolumeReservoir, rabVolumeInteraction,
      rabLightSample, inverseSelectionPdf);

    // Perform NEE if the light sample is valid

    if (lightSampleValid)
    {
      evalNEE(
        radiance,
        rabLightSample, inverseSelectionPdf, sampledTransportPortalIndex,
        ray, minimalRayInteraction, volumeInteraction);
    }
  }

  // Apply firefly filtering to the new NEE contribution
  // Note: This ensures super high energy fireflies do not make their way into the accumulation buffer and spread temporally
  // as this can create very distracting and unnsatural blobs of light which persist for many frames in the volumetric lighting.
  // Fireflies still get through with a basic clamp like this of course, but with the filtering and accumulation they make much less
  // of a visual impact and are better handled.

  const vec3 fireflyFilteredRadiance = fireflyFiltering(radiance, volumeArgs.froxelFireflyFilteringLuminanceThreshold);

  // Accumulate the previous reprojected radiance with the current filtered sampled radiance

  // Note: Pre-scale by 4pi to represent radiance output in every direction.
  // Todo: Remove this once we switch to using spherical harmonics as we can no longer make an isotropic scattering assumption in this case.
  const vec3 newAccumulatedRadiance = mix(oldRadiance, fireflyFilteredRadiance / fourPi, historyAgeWeight);
  // Note: Radiance needs to be encoded in gamma space for better perceptual texture filtering (and less quantization) and must be converted
  // to gamma space here.
  const vec4 newAccumulatedRadianceHistoryAge = vec4(linearToGammaFast(newAccumulatedRadiance), newHistoryAge);

  AccumulatedRadiance[froxelIndex + froxelVolumeOffset] = newAccumulatedRadianceHistoryAge;
}
