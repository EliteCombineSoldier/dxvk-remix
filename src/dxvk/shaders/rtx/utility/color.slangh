/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/external/turbo_colormap.h"
#include "rtx/utility/math.slangh"

// Approximate wavelengths for the sRGB primaries in nanometers. Note these are not exact as
// the sRGB primaries are mixtures of multiple wavelengths.
// https://clarkvision.com/articles/color-spaces/
static const f16vec3 sRGBPrimaryWavelengths = f16vec3(612.0f, 549.0f, 465.0f);

// Calculates the average value of a color
#define GENERIC_AVERAGE_COLOR(averageType, colorType)                        \
averageType calcAverageColor(colorType linearColor)                          \
{                                                                            \
  return (linearColor.r + linearColor.g + linearColor.b) / averageType(3.0); \
}

GENERIC_AVERAGE_COLOR(float16_t, f16vec3)

// Calculates luminance based on the function defined by ITU BT.709 for linear color
#define GENERIC_BT709_LUMINANCE(luminanceType, colorType)     \
luminanceType calcBt709Luminance(colorType linearColor)       \
{                                                             \
  return dot(linearColor, colorType(0.2126, 0.7152, 0.0722)); \
}

GENERIC_BT709_LUMINANCE(float16_t, f16vec3)
GENERIC_BT709_LUMINANCE(float, vec3)

// Calculates EV100 based off a luminance (perceptual radiance) value
#define GENERIC_LUMINANCE_EV100(type)                           \
type calcLuminanceEV100(type luminance)                         \
{                                                               \
  /* Note: Using standard definition of EV100 for luminance: */ \
  /* https://en.wikipedia.org/wiki/Exposure_value            */ \
  return log2(luminance * type(100.0f / 12.5f));                \
}

GENERIC_LUMINANCE_EV100(float)
GENERIC_LUMINANCE_EV100(vec3)

// Calculates luminance based off a EV100 (perceptual radiance) value
#define GENERIC_EV100_LUMINANCE(type)                           \
type calcEV100Luminance(type EV100)                             \
{                                                               \
  /* Note: Using standard definition of EV100 for luminance: */ \
  /* https://en.wikipedia.org/wiki/Exposure_value            */ \
  return exp2(EV100) / type(100.0f / 12.5f);                    \
}

GENERIC_EV100_LUMINANCE(float)
GENERIC_EV100_LUMINANCE(vec3)

// Calculates EV100 based off a illuminance (perceptual irradiance) value
#define GENERIC_ILLUMINANCE_EV100(type)                           \
type calcIlluminanceEV100(type illuminance)                       \
{                                                                 \
  /* Note: Using standard definition of EV100 for illuminance: */ \
  /* https://en.wikipedia.org/wiki/Exposure_value              */ \
  return log2(illuminance * type(100.0f / 250.0f));               \
}

GENERIC_ILLUMINANCE_EV100(float)
GENERIC_ILLUMINANCE_EV100(vec3)

// https://en.wikipedia.org/wiki/SRGB#Transformation
// Note: Technically following conversions are not 100% accurate, we simply approximate the
// sRGB transfer function with x^gamma rather than the full formula.
static const float kSRGBGamma = 2.2f;

// Converts color in linear space to color in gamma space with a sRGB gamma
#define GENERIC_LINEAR_TO_GAMMA(colorType)               \
colorType linearToGamma(colorType linearColor)           \
{                                                        \
  return pow(linearColor, colorType(1.0f / kSRGBGamma)); \
}

GENERIC_LINEAR_TO_GAMMA(f16vec4)
GENERIC_LINEAR_TO_GAMMA(f16vec3)
GENERIC_LINEAR_TO_GAMMA(vec3)

// Converts color in gamma space to color in linear space with a sRGB gamma
#define GENERIC_GAMMA_TO_LINEAR(colorType)       \
colorType gammaToLinear(colorType gammaColor)    \
{                                                \
  return pow(gammaColor, colorType(kSRGBGamma)); \
}

GENERIC_GAMMA_TO_LINEAR(f16vec4)
GENERIC_GAMMA_TO_LINEAR(f16vec3)
GENERIC_GAMMA_TO_LINEAR(vec3)

// Converts color in linear space to color in gamma space with a gamma of 2. Note this is highly approximate
// and does not match sRGB exactly, but it is simpler than using the pow function and ideally faster.
#define GENERIC_LINEAR_TO_GAMMA_FAST(colorType)    \
colorType linearToGammaFast(colorType linearColor) \
{                                                  \
  return sqrt(linearColor);                        \
}

GENERIC_LINEAR_TO_GAMMA_FAST(f16vec3)
GENERIC_LINEAR_TO_GAMMA_FAST(vec3)

// Converts color in gamma space to color in linear space with a gamma of 2. Note this is highly approximate
// and does not match sRGB exactly, but it is simpler than using the pow function and ideally faster.
#define GENERIC_GAMMA_TO_LINEAR_FAST(colorType)   \
colorType gammaToLinearFast(colorType gammaColor) \
{                                                 \
  return square(gammaColor);                      \
}

GENERIC_GAMMA_TO_LINEAR_FAST(f16vec3)
GENERIC_GAMMA_TO_LINEAR_FAST(vec3)

// Converts between RGB and YCoCg
vector<T, 3> rgbToYCoCg<T: __BuiltinFloatingPointType>(vector<T, 3> color)
{
  const matrix<T, 3, 3> rgbToYCoCgTransform = matrix<T, 3, 3>(
    T(0.25), T(0.5), T(-0.25),
    T(0.5), T(0.0), T(0.5),
    T(0.25), T(-0.5), T(-0.25)
  );

  return mul(rgbToYCoCgTransform, color);
}

vector<T, 3> yCoCgToRGB<T: __BuiltinFloatingPointType>(vector<T, 3> color)
{
  const matrix<T, 3, 3> yCoCgToRGBTransform = matrix<T, 3, 3>(
    T(1.0), T(1.0), T(1.0),
    T(1.0), T(0.0), T(-1.0),
    T(-1.0), T(1.0), T(-1.0)
  );

  return mul(yCoCgToRGBTransform, color);
}

// Uncharted 2 Filmic Tonemapping
// [John Hable, "Uncharted 2: HDR Lighting"]
// Also from: http://filmicworlds.com/blog/filmic-tonemapping-operators/

vec3 uncharted2Tonemap(vec3 x)
{
  float A = 0.05;
  float B = 0.80;
  float C = 0.10;
  float D = 0.20;
  float E = 0.02;
  float F = 0.30;
  return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;
}

vec3 uncharted2(vec3 color)
{
  const float W = 16.2;
  float exposureBias = 8.0;
  vec3 curr = uncharted2Tonemap(exposureBias * color);
  vec3 whiteScale = 1.0 / uncharted2Tonemap(vec3(W));
  return curr * whiteScale;
}

float calcPerceptualImportance(vec3 radiance)
{
  const vec3 kGamma = vec3(1 / 2.2);
#if 0
  vec3 toneMappedColor = radiance;
#elif 1
  float kSigma = 1.0;
  vec3 toneMappedColor = pow(radiance, kSigma * kGamma);
#else
  vec3 toneMappedColor = pow(uncharted2(radiance), kGamma);
#endif

  // Ensure non-zero values - we don't look at black holes.
  return calcBt709Luminance(toneMappedColor) + 1e-5;
}

float calcRelativePerceptualImportance(vec3 radiance, vec3 radianceBase)
{
  float r = calcPerceptualImportance( radiance );
  float b = calcPerceptualImportance( radianceBase );
    
  return r / max(b, 1e-6);
}
