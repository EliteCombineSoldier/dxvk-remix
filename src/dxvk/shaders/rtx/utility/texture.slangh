/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/concept/surface/surface.slangh"

f16vec4 textureRead(uint16_t textureIndex, SurfaceInteraction surfaceInteraction, float lodBias = 0.0)
{
  const float gradBias = pow(2, lodBias);

  // Note: The nonuniform decoration on the texture index here and returned Sampler2D does not propagate through function calls due to a rather
  // annoying exception in the specification (See: https://github.com/KhronosGroup/GLSL/blob/master/extensions/ext/GL_EXT_nonuniform_qualifier.txt).
  // As such, no functions are used here and SampleGrad is called directly on the retrieved Sampler2D rather than using the GLSL-style textureGrad
  // helper we had before. This ensures the nonuniform decoration will propagate correctly as otherwise all threads in a warp may potentially sample
  // from the same texture and cause blocky artifacts on some hardware.
  return textures[nonuniformEXT(uint(textureIndex))].SampleGrad(
    surfaceInteraction.textureCoordinates,
    surfaceInteraction.textureGradientX * gradBias,
    surfaceInteraction.textureGradientY * gradBias
  );
}
